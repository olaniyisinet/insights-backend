"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfigByEnv = exports.getConfig = void 0;
const supportedEnvironments = ["dev", "prod", "test"];
const getConfig = (app) => {
    const defaultEnv = app.node.tryGetContext("defaultEnv");
    const awsAccountId = app.node.tryGetContext("awsAccountId");
    let env = app.node.tryGetContext("env");
    let isPipelineMode = app.node.tryGetContext("pipeline");
    // input invalidations
    if (!defaultEnv) {
        console.log("No default environment [defaultEnv] in ckd.json, Aborting build process");
        throw new Error("No value found for defaultEnv in cdk config");
    }
    if (!env) {
        console.log(`No build environment passed, so using the defaultEnv [${defaultEnv}]`);
        env = defaultEnv;
    }
    if (!supportedEnvironments.includes(env)) {
        throw new Error(`${env} is not in supported environments: ${supportedEnvironments.join(", ")}`);
    }
    // setting the build config values 
    console.log(`Loading the configs for build environment [${env}]`);
    const unparsedEnv = app.node.tryGetContext(env);
    return {
        env: env,
        region: ensureString(unparsedEnv, "region"),
        envPrefix: ensureString(unparsedEnv, "envPrefix"),
        appName: ensureString(unparsedEnv, "appName"),
        awsAccountId: awsAccountId,
        pipelineMode: isPipelineMode
    };
};
exports.getConfig = getConfig;
const ensureString = (object, propName) => {
    if (!object[propName] || object[propName].trim().length === 0)
        throw new Error(propName + " does not exist or is empty");
    return object[propName];
};
const getConfigByEnv = (environment, app) => {
    if (!supportedEnvironments.includes(environment)) {
        throw new Error(`[${environment}] is not in supported environments: ${supportedEnvironments.join(", ")}`);
    }
    let isPipelineMode = app.node.tryGetContext("pipeline");
    const awsAccountId = app.node.tryGetContext("awsAccountId");
    const unparsedEnv = app.node.tryGetContext(environment);
    console.log(`Loading the configs for build environment using getConfigByEnv [${environment}]`);
    return {
        env: environment,
        region: ensureString(unparsedEnv, "region"),
        envPrefix: ensureString(unparsedEnv, "envPrefix"),
        appName: ensureString(unparsedEnv, "appName"),
        awsAccountId: awsAccountId,
        pipelineMode: isPipelineMode
    };
};
exports.getConfigByEnv = getConfigByEnv;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQtY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYnVpbGQtY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLE1BQU0scUJBQXFCLEdBQUcsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBVSxDQUFDO0FBYXhELE1BQU0sU0FBUyxHQUFHLENBQUMsR0FBWSxFQUFlLEVBQUU7SUFFbkQsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDeEQsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDNUQsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEMsSUFBSSxjQUFjLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFeEQsc0JBQXNCO0lBQ3RCLElBQUksQ0FBQyxVQUFVLEVBQUc7UUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLHlFQUF5RSxDQUFDLENBQUM7UUFDdkYsTUFBTSxJQUFJLEtBQUssQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDO0tBQ2xFO0lBRUQsSUFBRyxDQUFDLEdBQUcsRUFBRTtRQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMseURBQXlELFVBQVUsR0FBRyxDQUFDLENBQUM7UUFDcEYsR0FBRyxHQUFHLFVBQVUsQ0FBQztLQUNwQjtJQUVELElBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDckMsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLEdBQUcsc0NBQXNDLHFCQUFxQixDQUFDLElBQUksQ0FBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDcEc7SUFHRCxtQ0FBbUM7SUFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4Q0FBOEMsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNsRSxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoRCxPQUFPO1FBQ0gsR0FBRyxFQUFFLEdBQUc7UUFDUixNQUFNLEVBQUUsWUFBWSxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUM7UUFDM0MsU0FBUyxFQUFFLFlBQVksQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDO1FBQ2pELE9BQU8sRUFBRSxZQUFZLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQztRQUM3QyxZQUFZLEVBQUUsWUFBWTtRQUMxQixZQUFZLEVBQUUsY0FBYztLQUMvQixDQUFBO0FBQ0wsQ0FBQyxDQUFBO0FBbENZLFFBQUEsU0FBUyxhQWtDckI7QUFFRCxNQUFNLFlBQVksR0FBRyxDQUFDLE1BQStCLEVBQUUsUUFBZ0IsRUFBVyxFQUFFO0lBQ2hGLElBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sS0FBSyxDQUFDO1FBQ3hELE1BQU0sSUFBSSxLQUFLLENBQUMsUUFBUSxHQUFFLDZCQUE2QixDQUFDLENBQUM7SUFFN0QsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDNUIsQ0FBQyxDQUFBO0FBRU0sTUFBTSxjQUFjLEdBQUcsQ0FBQyxXQUFpQyxFQUFFLEdBQVksRUFBZSxFQUFFO0lBRTNGLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEVBQUU7UUFDOUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxJQUFJLFdBQVcsdUNBQXVDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDN0c7SUFFRCxJQUFJLGNBQWMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN4RCxNQUFNLFlBQVksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUM1RCxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUd4RCxPQUFPLENBQUMsR0FBRyxDQUFDLG1FQUFtRSxXQUFXLEdBQUcsQ0FBQyxDQUFDO0lBQy9GLE9BQU87UUFDSCxHQUFHLEVBQUUsV0FBVztRQUNoQixNQUFNLEVBQUUsWUFBWSxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUM7UUFDM0MsU0FBUyxFQUFFLFlBQVksQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDO1FBQ2pELE9BQU8sRUFBRSxZQUFZLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQztRQUM3QyxZQUFZLEVBQUUsWUFBWTtRQUMxQixZQUFZLEVBQUUsY0FBYztLQUMvQixDQUFBO0FBQ0wsQ0FBQyxDQUFBO0FBcEJZLFFBQUEsY0FBYyxrQkFvQjFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gXCJhd3MtY2RrLWxpYlwiO1xuXG5jb25zdCBzdXBwb3J0ZWRFbnZpcm9ubWVudHMgPSBbXCJkZXZcIiwgXCJwcm9kXCIsIFwidGVzdFwiXSBhcyBjb25zdDtcbnR5cGUgU3VwcG9ydGVkRW52aXJvbm1lbnQgPSB0eXBlb2Ygc3VwcG9ydGVkRW52aXJvbm1lbnRzW251bWJlcl07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnVpbGRDb25maWcge1xuICAgIHJlYWRvbmx5IGVudjogU3VwcG9ydGVkRW52aXJvbm1lbnQ7XG4gICAgcmVhZG9ubHkgcmVnaW9uOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgZW52UHJlZml4OiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgYXBwTmFtZTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGF3c0FjY291bnRJZDogc3RyaW5nO1xuICAgIHJlYWRvbmx5IHBpcGVsaW5lTW9kZTogYm9vbGVhbjtcbn1cblxuXG5leHBvcnQgY29uc3QgZ2V0Q29uZmlnID0gKGFwcDogY2RrLkFwcCk6IEJ1aWxkQ29uZmlnID0+IHtcblxuICAgIGNvbnN0IGRlZmF1bHRFbnYgPSBhcHAubm9kZS50cnlHZXRDb250ZXh0KFwiZGVmYXVsdEVudlwiKTtcbiAgICBjb25zdCBhd3NBY2NvdW50SWQgPSBhcHAubm9kZS50cnlHZXRDb250ZXh0KFwiYXdzQWNjb3VudElkXCIpO1xuICAgIGxldCBlbnYgPSBhcHAubm9kZS50cnlHZXRDb250ZXh0KFwiZW52XCIpO1xuICAgIGxldCBpc1BpcGVsaW5lTW9kZSA9IGFwcC5ub2RlLnRyeUdldENvbnRleHQoXCJwaXBlbGluZVwiKTtcblxuICAgIC8vIGlucHV0IGludmFsaWRhdGlvbnNcbiAgICBpZiggIWRlZmF1bHRFbnYgKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiTm8gZGVmYXVsdCBlbnZpcm9ubWVudCBbZGVmYXVsdEVudl0gaW4gY2tkLmpzb24sIEFib3J0aW5nIGJ1aWxkIHByb2Nlc3NcIik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHZhbHVlIGZvdW5kIGZvciBkZWZhdWx0RW52IGluIGNkayBjb25maWdcIik7XG4gICAgfVxuXG4gICAgaWYoIWVudikge1xuICAgICAgICBjb25zb2xlLmxvZyhgTm8gYnVpbGQgZW52aXJvbm1lbnQgcGFzc2VkLCBzbyB1c2luZyB0aGUgZGVmYXVsdEVudiBbJHtkZWZhdWx0RW52fV1gKTtcbiAgICAgICAgZW52ID0gZGVmYXVsdEVudjtcbiAgICB9XG5cbiAgICBpZighc3VwcG9ydGVkRW52aXJvbm1lbnRzLmluY2x1ZGVzKGVudikpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2Vudn0gaXMgbm90IGluIHN1cHBvcnRlZCBlbnZpcm9ubWVudHM6ICR7c3VwcG9ydGVkRW52aXJvbm1lbnRzLmpvaW4oIFwiLCBcIil9YCk7XG4gICAgfVxuXG5cbiAgICAvLyBzZXR0aW5nIHRoZSBidWlsZCBjb25maWcgdmFsdWVzIFxuICAgIGNvbnNvbGUubG9nKGBMb2FkaW5nIHRoZSBjb25maWdzIGZvciBidWlsZCBlbnZpcm9ubWVudCBbJHtlbnZ9XWApO1xuICAgIGNvbnN0IHVucGFyc2VkRW52ID0gYXBwLm5vZGUudHJ5R2V0Q29udGV4dChlbnYpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGVudjogZW52LFxuICAgICAgICByZWdpb246IGVuc3VyZVN0cmluZyh1bnBhcnNlZEVudiwgXCJyZWdpb25cIiksXG4gICAgICAgIGVudlByZWZpeDogZW5zdXJlU3RyaW5nKHVucGFyc2VkRW52LCBcImVudlByZWZpeFwiKSxcbiAgICAgICAgYXBwTmFtZTogZW5zdXJlU3RyaW5nKHVucGFyc2VkRW52LCBcImFwcE5hbWVcIiksXG4gICAgICAgIGF3c0FjY291bnRJZDogYXdzQWNjb3VudElkLFxuICAgICAgICBwaXBlbGluZU1vZGU6IGlzUGlwZWxpbmVNb2RlXG4gICAgfVxufVxuXG5jb25zdCBlbnN1cmVTdHJpbmcgPSAob2JqZWN0OiB7IFtuYW1lOiBzdHJpbmddOiBhbnkgfSwgcHJvcE5hbWU6IHN0cmluZyApOiBzdHJpbmcgPT4ge1xuICAgIGlmKCFvYmplY3RbcHJvcE5hbWVdIHx8IG9iamVjdFtwcm9wTmFtZV0udHJpbSgpLmxlbmd0aCA9PT0gMClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb3BOYW1lICtcIiBkb2VzIG5vdCBleGlzdCBvciBpcyBlbXB0eVwiKTtcblxuICAgIHJldHVybiBvYmplY3RbcHJvcE5hbWVdO1xufVxuXG5leHBvcnQgY29uc3QgZ2V0Q29uZmlnQnlFbnYgPSAoZW52aXJvbm1lbnQ6IFN1cHBvcnRlZEVudmlyb25tZW50LCBhcHA6IGNkay5BcHApOiBCdWlsZENvbmZpZyA9PiB7XG5cbiAgICBpZiAoIXN1cHBvcnRlZEVudmlyb25tZW50cy5pbmNsdWRlcyhlbnZpcm9ubWVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBbJHtlbnZpcm9ubWVudH1dIGlzIG5vdCBpbiBzdXBwb3J0ZWQgZW52aXJvbm1lbnRzOiAke3N1cHBvcnRlZEVudmlyb25tZW50cy5qb2luKFwiLCBcIil9YCk7XG4gICAgfVxuXG4gICAgbGV0IGlzUGlwZWxpbmVNb2RlID0gYXBwLm5vZGUudHJ5R2V0Q29udGV4dChcInBpcGVsaW5lXCIpO1xuICAgIGNvbnN0IGF3c0FjY291bnRJZCA9IGFwcC5ub2RlLnRyeUdldENvbnRleHQoXCJhd3NBY2NvdW50SWRcIik7XG4gICAgY29uc3QgdW5wYXJzZWRFbnYgPSBhcHAubm9kZS50cnlHZXRDb250ZXh0KGVudmlyb25tZW50KTtcblxuXG4gICAgY29uc29sZS5sb2coYExvYWRpbmcgdGhlIGNvbmZpZ3MgZm9yIGJ1aWxkIGVudmlyb25tZW50IHVzaW5nIGdldENvbmZpZ0J5RW52IFske2Vudmlyb25tZW50fV1gKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBlbnY6IGVudmlyb25tZW50LFxuICAgICAgICByZWdpb246IGVuc3VyZVN0cmluZyh1bnBhcnNlZEVudiwgXCJyZWdpb25cIiksXG4gICAgICAgIGVudlByZWZpeDogZW5zdXJlU3RyaW5nKHVucGFyc2VkRW52LCBcImVudlByZWZpeFwiKSxcbiAgICAgICAgYXBwTmFtZTogZW5zdXJlU3RyaW5nKHVucGFyc2VkRW52LCBcImFwcE5hbWVcIiksXG4gICAgICAgIGF3c0FjY291bnRJZDogYXdzQWNjb3VudElkLFxuICAgICAgICBwaXBlbGluZU1vZGU6IGlzUGlwZWxpbmVNb2RlXG4gICAgfVxufSJdfQ==